var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Examples","page":"Tutorials","title":"Examples","text":"","category":"section"},{"location":"tutorials/#Recursive-construction","page":"Tutorials","title":"Recursive construction","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(Image: )","category":"page"},{"location":"tutorials/#Recursive-procedure","page":"Tutorials","title":"Recursive procedure","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(Image: )","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Reflect Cn-1, shift by q^n-1 and augment (TBD).","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For n in mathbbN, positive integer and N = 2^n. A Gray code G_n is an tuple G_n = (X_1X_2X_N) which satisfies the following properties:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"X_1 X_2   X_N are binary sequences (of length n) corresponding to the binary representation of the numbers 0 1 ldots  N  1, arranged in a specific order,\nFor any 0 le j le N-1, adjacent pairs X_jX_j+1 differ in only one position (i.e., only one of the n bits would differ),\nThe start and end sequences (i.e., sequences X_1 and X_N differ in just one position.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Gray code G_n can be recursively constructed as follows. Start with G_1 = (01) and for N=2^n n ge 1, Let G_n = left(X_1ldotsX_N1X_Nright), ","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"G_n+1 = left(0X_1ldots0X_N10X_N1X_N1X_N11X_1right)","category":"page"},{"location":"tutorials/#Illustration","page":"Tutorials","title":"Illustration","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"using Plots\nfunction plotmatrix(A;kwargs...)\n    a,b=size(A)\n    X = transpose(repeat(1:b, 1, a))[:]\n    Y = repeat(a:-1:1, b)[:]\n\tscatter(X,Y, marker_z = A[:], marker=:rect,markersize = 4,  color = :viridis,aspectratio=1,ylims=[0,size(G,1)+1],alpha=1,label=:none,colorkey=:none,axis=:none;kwargs...)\n\njulia> plotmatrix(gray(6));\njulia> plotmatrix(G,size=(800,400),color=:summer)\njulia> plotmatrix(G,size=(800,200),color=:summer,markersize=7,xlims=[1,size(G,2)+0],ylims=[1/2,size(G,1)-0])\nend","category":"page"},{"location":"tutorials/#Binary-Gray-Code-n4","page":"Tutorials","title":"Binary Gray Code n=4","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(Image: )","category":"page"},{"location":"tutorials/#Binary-Gray-Code-n5","page":"Tutorials","title":"Binary Gray Code n=5","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(Image: )","category":"page"},{"location":"tutorials/#Binary-Gray-Code-n6","page":"Tutorials","title":"Binary Gray Code n=6","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"(Image: )","category":"page"},{"location":"tutorials/#Linear-Algebraic-method","page":"Tutorials","title":"Linear Algebraic method","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"TBD g=Gb and b=Bg, where G is a Jordan matrix, which is ","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"julia> n,q=4,2\njulia> GrayCoding.GrayMatrix(n,q)\n4×4 Matrix{Int64}:\n 1  0  0  0\n 1  1  0  0\n 1  1  1  0\n 1  1  1  1\n4×4 Matrix{Int64}:\n 1  0  0  0\n 1  1  0  0\n 0  1  1  0\n 0  0  1  1\n4×16 Matrix{Int64}:\n 0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n 0  0  0  0  1  1  1  1  0  0  0  0  1  1  1  1\n 0  0  1  1  0  0  1  1  0  0  1  1  0  0  1  1\n 0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1\n4×16 Matrix{Int64}:\n 0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n 0  0  0  0  1  1  1  1  1  1  1  1  0  0  0  0\n 0  0  1  1  1  1  0  0  0  0  1  1  1  1  0  0\n 0  1  1  0  0  1  1  0  0  1  1  0  0  1  1  0\n\njulia> G,B,g,b=GrayCoding.GrayMatrix(10,5);\njulia> G\n10×10 Matrix{Int64}:\n 1  0  0  0  0  0  0  0  0  0\n 1  1  0  0  0  0  0  0  0  0\n 1  1  1  0  0  0  0  0  0  0\n 1  1  1  1  0  0  0  0  0  0\n 1  1  1  1  1  0  0  0  0  0\n 1  1  1  1  1  1  0  0  0  0\n 1  1  1  1  1  1  1  0  0  0\n 1  1  1  1  1  1  1  1  0  0\n 1  1  1  1  1  1  1  1  1  0\n 1  1  1  1  1  1  1  1  1  1\n julia>B\n 10×10 Matrix{Int64}:\n 1  0  0  0  0  0  0  0  0  0\n 4  1  0  0  0  0  0  0  0  0\n 0  4  1  0  0  0  0  0  0  0\n 0  0  4  1  0  0  0  0  0  0\n 0  0  0  4  1  0  0  0  0  0\n 0  0  0  0  4  1  0  0  0  0\n 0  0  0  0  0  4  1  0  0  0\n 0  0  0  0  0  0  4  1  0  0\n 0  0  0  0  0  0  0  4  1  0\n 0  0  0  0  0  0  0  0  4  1","category":"page"},{"location":"applications/#Applications","page":"List of Applications","title":"Applications","text":"","category":"section"},{"location":"applications/","page":"List of Applications","title":"List of Applications","text":"Digital Modulation Schemes:\nDNA Codon mapping\nQuantum Circuits and Gates\nDigital Electronics/Counters\nMusic/Puzzles","category":"page"},{"location":"quantum/#Decomposition-of-Quantum-Gates","page":"Quantum Algorithms and Circuits","title":"Decomposition of Quantum Gates","text":"","category":"section"},{"location":"quantum/#Universal-Decomposition","page":"Quantum Algorithms and Circuits","title":"Universal Decomposition","text":"","category":"section"},{"location":"quantum/","page":"Quantum Algorithms and Circuits","title":"Quantum Algorithms and Circuits","text":"Any arbitrary unitary gate acting on n-qubit can be implemented as a cascade of single-qubit and controlled-NOT (CNOT) gates.","category":"page"},{"location":"quantum/","page":"Quantum Algorithms and Circuits","title":"Quantum Algorithms and Circuits","text":"textbfUpsi rangle = beginpmatrix u_11  u_12  ldots  u_1N  u_11  u_12  ldots  u_1N endpmatrix","category":"page"},{"location":"quantum/#CNOT-gates","page":"Quantum Algorithms and Circuits","title":"CNOT gates","text":"","category":"section"},{"location":"quantum/","page":"Quantum Algorithms and Circuits","title":"Quantum Algorithms and Circuits","text":"CNOT stands for Controlled-NOT, which is one of the key quantum logic gate. It is a two qubit gate. The gate flips the second qubit (called the target qubit) when the first gate (the control gate) is lvert 1 rangle, while the target qubit remain unchanged when the control gate is in state lvert 0 rangle.","category":"page"},{"location":"quantum/","page":"Quantum Algorithms and Circuits","title":"Quantum Algorithms and Circuits","text":"```math  \\begin{aligned}  U_{\\text{CNOT}} &= \\lvert 0 \\rangle \\otimes \\langle 0 \\rvert \\otimes \\begin{bmatrix} 1 & 0 \\ 0 & 1 \\end{bmatrix} + \\lvert 1 \\rangle \\otimes \\langle 1 \\rvert \\otimes \\begin{bmatrix} 1 & 0 \\ 0 & 1 \\end{bmatrix}\\\n                 &= \\lvert 0 \\rangle \\langle 0 \\rvert \\otimes \\begin{bmatrix} 1 & 0 \\ 0 & 1 \\end{bmatrix} + \\lvert 1 \\rangle  \\langle 1 \\rvert \\otimes \\begin{bmatrix} 1 & 0 \\ 0 & 1 \\end{bmatrix}\\\n                 &= \\begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 1 \\ 0 & 0 & 1 & 0\\end{bmatrix}   \\end{aligned}  ```","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GrayCoding","category":"page"},{"location":"#GrayCoding","page":"Home","title":"GrayCoding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GrayCoding.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for GrayCoding!","category":"page"},{"location":"#What-is-GrayCocoding.jl?","page":"Home","title":"What is GrayCocoding.jl?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GrayCoding is a formal Linear Algebraic framework for q-ry Gray Code. Encoding and Decooding of Gray codes can be treated as a special case of algebraic block coding.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Encoding: textbfg=G textbfb\nDecoding: textbfb=B textbfg","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nThis is still under active devlopment.","category":"page"},{"location":"#Resources-for-getting-started","page":"Home","title":"Resources for getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are few ways to get started with GrayCoding:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Read TBD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GrayCoding]","category":"page"},{"location":"#GrayCoding.GrayMatrix","page":"Home","title":"GrayCoding.GrayMatrix","text":"Generate Encoding and Decoding matrices for Gray Codes of alphabet.\n\njulia> G,B,g,b=GrayMatrix(4, 2);\njulia> G\n    4×4 Matrix{Int64}:\n    1  0  0  0\n    1  1  0  0\n    1  1  1  0\n    1  1  1  1\n    julia> B\n    4×4 Matrix{Int64}:\n    1  0  0  0\n    1  1  0  0\n    0  1  1  0\n    0  0  1  1\n    julia> g \n    4×16 Matrix{Int64}:\n    0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n    0  0  0  0  1  1  1  1  0  0  0  0  1  1  1  1\n    0  0  1  1  0  0  1  1  0  0  1  1  0  0  1  1\n    0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1\n    julia> b \n    4×16 Matrix{Int64}:\n    0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1\n    0  0  0  0  1  1  1  1  1  1  1  1  0  0  0  0\n    0  0  1  1  1  1  0  0  0  0  1  1  1  1  0  0\n    0  1  1  0  0  1  1  0  0  1  1  0  0  1  1  0\n\n\n\n\n\n","category":"function"},{"location":"#GrayCoding.bin2dec-Tuple{Any}","page":"Home","title":"GrayCoding.bin2dec","text":"Binary to decimal number conversion. Input can be \n\nbinary strings, \nbinary digits or \na vector of binary string or digits\n\njulia> bin2dec([011,\"0111\",0111])\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.dec2bin-Tuple{Any, Any}","page":"Home","title":"GrayCoding.dec2bin","text":"Decimal to binary conversion\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.dnamatrix-Tuple{}","page":"Home","title":"GrayCoding.dnamatrix","text":"Plot the DNA codon matrix\n\njulia> dnamatrix()\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.gen_gray-Tuple{Any}","page":"Home","title":"GrayCoding.gen_gray","text":"Generate Gray vectors\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.gray-Tuple{Any}","page":"Home","title":"GrayCoding.gray","text":"Recursive construction of binary Gray code digits.\n\nGray code gn can be recursively constructed as follows. Start with g1 = (01) = (g_1g_2) \n\ngn+1 = 0g_10g_N10g_N1g_N1g_N11g_1\n\nExamples\n\njulia> gray(3)\n3×8 Matrix{Int64}:\n 0  0  0  0  1  1  1  1\n 0  0  1  1  0  1  1  0\n 0  1  1  0  1  1  0  0\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.gray_recursion-Tuple{Int64}","page":"Home","title":"GrayCoding.gray_recursion","text":"Recursive function to illustrate the reflection+shift property of Gray mapping.\n\nArguents\n\nn - The iteration number n ≥ 0\nC - The decimal sequence of the gray mapped bits\nR - The reflected sequence (without shifting)\n\njulia> C,R = gray_recursion(4)\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.matrixplot-Tuple{Any}","page":"Home","title":"GrayCoding.matrixplot","text":"Plots a matrix into a 2D with labels. Optional arguments including colors\n\njulia> using Random;\njulia> A= rand(0:9,10,10);\njulia> matrixplot(A)\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.pam_encode-Tuple{Any, Any}","page":"Home","title":"GrayCoding.pam_encode","text":"Pulse amplitude modulation (PAM) mapping. This is a type of digital modulation mapping used in Communication systems.\n\n\n\n\n\n","category":"method"},{"location":"#GrayCoding.reflect_code-Tuple{Any}","page":"Home","title":"GrayCoding.reflect_code","text":"Reflected code. \n\njulia>reflect_code(3)\n[0,1,3,2,2,3,1,0]\n\n\n\n\n\n","category":"method"},{"location":"algebra/#Algebraic-framework-of-Gray-Codes","page":"Algebra of Gray Codes","title":"Algebraic framework of Gray Codes","text":"","category":"section"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"The classical algorithmic procedure of encoding and decoding are as follows:","category":"page"},{"location":"algebra/#Encoding","page":"Algebra of Gray Codes","title":"Encoding","text":"","category":"section"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"q-ry digits d to gray digits g conversion.","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"g_i = begincases  d_i   textif  modleft(displaystylesum_j=1^i-1g_j2right)=0   q-1-d_i   textif modleft(displaystyle sum_j=1^i-1g_j2right)=1 endcases","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"and g_1 = d_1.","category":"page"},{"location":"algebra/#Decoding","page":"Algebra of Gray Codes","title":"Decoding","text":"","category":"section"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"d_i = begincases  g_i   textif  modleft(displaystylesum_j=1^i-1g_j2right)=0   q-1-g_i   textif modleft(displaystyle sum_j=1^i-1g_j2right)=1  endcases","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"and d_1 = g_1.","category":"page"},{"location":"algebra/#Linear-Algebraic-Formulation-(N.Rethnakar-2020)","page":"Algebra of Gray Codes","title":"Linear Algebraic Formulation (N.Rethnakar 2020)","text":"","category":"section"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"Example of generator matrix G for binary to gray mapping is given by,","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"G=beginpmatrix 1   colorgray0     colorgray0    colorgray0     colorgray0    colorgray0   \n 1    1   colorgray0   colorgray0   colorgray0   colorgray0   \n colorgray0    1   1  colorgray0   colorgray0   colorgray0   \n colorgray0    colorgray0   1  1  colorgray0   colorgray0   \n colorgray0    colorgray0   colorgray0   1  1  colorgray0   \n colorgray0    colorgray0   colorgray0   colorgray0   1  1 endpmatrix","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"The decoding matrix B=G^-1 is given by,","category":"page"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"  B=beginpmatrix  1    colorgray0     colorgray0     colorgray0     colorgray0     colorgray0   \n1   1   colorgray0   colorgray0     colorgray0    colorgray0   \n1   1   1  colorgray0     colorgray0    colorgray0   \n1   1   1  1    colorgray0    colorgray0   \n1   1   1  1    1   colorgray0   \n1   1   1  1    1   1 endpmatrix","category":"page"},{"location":"algebra/#Generalized-q-ry-Gray-Code","page":"Algebra of Gray Codes","title":"Generalized q-ry Gray Code","text":"","category":"section"},{"location":"algebra/","page":"Algebra of Gray Codes","title":"Algebra of Gray Codes","text":"G=beginpmatrix 1   colorgray0    colorgray0    colorgray0    colorgray0    colorgray0  \n q-1    1   colorgray0   colorgray0   colorgray0   colorgray0  \n colorgray0    q-1   1  colorgray0   colorgray0   colorgray0  \n colorgray0    colorgray0   q-1  1  colorgray0   colorgray0  \n colorgray0    colorgray0   colorgray0   q-1  1  colorgray0  \n colorgray0    colorgray0   colorgray0   colorgray0   q-1  1 endpmatrix equiv beginpmatrix 1   colorgray0    colorgray0    colorgray0    colorgray0    colorgray0  \n -1    1   colorgray0   colorgray0   colorgray0   colorgray0  \n colorgray0    -1   1  colorgray0   colorgray0   colorgray0  \n colorgray0    colorgray0   -1  1  colorgray0   colorgray0  \n colorgray0    colorgray0   colorgray0   -1  1  colorgray0  \n colorgray0    colorgray0   colorgray0   colorgray0   -1  1 endpmatrix_mathbbF_q","category":"page"}]
}
